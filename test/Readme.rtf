{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c45600\c0;\csgenericrgb\c100000\c100000\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 //This project is about the ORBSLAM2\
//To select the key points in the moving objects of two picture, \
//which have the camera moving when taken the two photo.\

\f1 \
\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f2\fs22 \cf2 \cb3 /*
\f0\fs24 \cf0 \

\f2\fs22 \cf2  #include <iostream>
\f0\fs24 \cf0 \

\f2\fs22 \cf2  #include <fstream>
\f0\fs24 \cf0 \

\f2\fs22 \cf2  #include <string>
\f0\fs24 \cf0 \

\f2\fs22 \cf2  
\f0\fs24 \cf0 \

\f2\fs22 \cf2  //#include <g2o/types/slam3d/types_slam3d.h>
\f0\fs24 \cf0 \

\f2\fs22 \cf2  #include "block_solver.h"
\f0\fs24 \cf0 \

\f2\fs22 \cf2  #include <optimization_algorithm_levenberg.h>
\f0\fs24 \cf0 \

\f2\fs22 \cf2  #include <optimization_algorithm_gauss_newton.h>
\f0\fs24 \cf0 \

\f2\fs22 \cf2  #include <linear_solver_dense.h>
\f0\fs24 \cf0 \

\f2\fs22 \cf2  //#include <g2o/solvers/cholmod/linear_solver_cholmod.h>
\f0\fs24 \cf0 \

\f2\fs22 \cf2  using namespace std;
\f0\fs24 \cf0 \

\f2\fs22 \cf2  
\f0\fs24 \cf0 \

\f2\fs22 \cf2  * 
\f1 \'b1\'be\'b3\'cc\'d0\'f2\'d1\'dd\'ca\'be\'c8\'e7\'ba\'ce\'d3\'c3
\f2 g2o solver
\f1 \'bd\'f8\'d0\'d0\'ce\'bb\'d7\'cb\'cd\'bc\'d3\'c5\'bb\'af
\f0\fs24 \cf0 \

\f2\fs22 \cf2  * sphere.g2o
\f1 \'ca\'c7\'c8\'cb\'b9\'a4\'c9\'fa\'b3\'c9\'b5\'c4\'d2\'bb\'b8\'f6
\f2 Pose graph
\f1 \'a3\'ac\'ce\'d2\'c3\'c7\'c0\'b4\'d3\'c5\'bb\'af\'cb\'fc\'a1\'a3
\f0\fs24 \cf0 \

\f2\fs22 \cf2  * 
\f1 \'be\'a1\'b9\'dc\'bf\'c9\'d2\'d4\'d6\'b1\'bd\'d3\'cd\'a8\'b9\'fd
\f2 load
\f1 \'ba\'af\'ca\'fd\'b6\'c1\'c8\'a1\'d5\'fb\'b8\'f6\'cd\'bc\'a3\'ac\'b5\'ab\'ce\'d2\'c3\'c7\'bb\'b9\'ca\'c7\'d7\'d4\'bc\'ba\'c0\'b4\'ca\'b5\'cf\'d6\'b6\'c1\'c8\'a1\'b4\'fa\'c2\'eb\'a3\'ac\'d2\'d4\'c6\'da\'bb\'f1\'b5\'c3\'b8\'fc\'c9\'ee\'bf\'cc\'b5\'c4\'c0\'ed\'bd\'e2
\f0\fs24 \cf0 \

\f2\fs22 \cf2  * 
\f1 \'d5\'e2\'c0\'ef\'ca\'b9\'d3\'c3
\f2 g2o/types/slam3d/
\f1 \'d6\'d0\'b5\'c4
\f2 SE3
\f1 \'b1\'ed\'ca\'be\'ce\'bb\'d7\'cb\'a3\'ac\'cb\'fc\'ca\'b5\'d6\'ca\'c9\'cf\'ca\'c7\'cb\'c4\'d4\'aa\'ca\'fd\'b6\'f8\'b7\'c7\'c0\'ee\'b4\'fa\'ca\'fd
\f2 .
\f0\fs24 \cf0 \
\

\f2\fs22 \cf2 int main( int argc, char** argv )
\f0\fs24 \cf0 \

\f2\fs22 \cf2 \{
\f0\fs24 \cf0 \

\f2\fs22 \cf2     if ( argc != 2 )
\f0\fs24 \cf0 \

\f2\fs22 \cf2     \{
\f0\fs24 \cf0 \

\f2\fs22 \cf2         cout<<"Usage: pose_graph_g2o_SE3 sphere.g2o"<<endl;
\f0\fs24 \cf0 \

\f2\fs22 \cf2         return 1;
\f0\fs24 \cf0 \

\f2\fs22 \cf2     \}
\f0\fs24 \cf0 \

\f2\fs22 \cf2     ifstream fin( argv[1] );
\f0\fs24 \cf0 \

\f2\fs22 \cf2     if ( !fin )
\f0\fs24 \cf0 \

\f2\fs22 \cf2     \{
\f0\fs24 \cf0 \

\f2\fs22 \cf2         cout<<"file "<<argv[1]<<" does not exist."<<endl;
\f0\fs24 \cf0 \

\f2\fs22 \cf2         return 1;
\f0\fs24 \cf0 \

\f2\fs22 \cf2     \}
\f0\fs24 \cf0 \

\f2\fs22 \cf2     
\f0\fs24 \cf0 \

\f2\fs22 \cf2     typedef g2o::BlockSolver<g2o::BlockSolverTraits<6,6>> Block;  // 6x6 BlockSolver
\f0\fs24 \cf0 \

\f2\fs22 \cf2     Block::LinearSolverType* linearSolver = new g2o::LinearSolverCholmod<Block::PoseMatrixType>(); // 
\f1 \'cf\'df\'d0\'d4\'b7\'bd\'b3\'cc\'c7\'f3\'bd\'e2\'c6\'f7
\f0\fs24 \cf0 \

\f2\fs22 \cf2     Block* solver_ptr = new Block( linearSolver );      // 
\f1 \'be\'d8\'d5\'f3\'bf\'e9\'c7\'f3\'bd\'e2\'c6\'f7
\f0\fs24 \cf0 \

\f2\fs22 \cf2     // 
\f1 \'cc\'dd\'b6\'c8\'cf\'c2\'bd\'b5\'b7\'bd\'b7\'a8\'a3\'ac\'b4\'d3
\f2 GN, LM, DogLeg 
\f1 \'d6\'d0\'d1\'a1
\f0\fs24 \cf0 \

\f2\fs22 \cf2     g2o::OptimizationAlgorithmLevenberg* solver = new g2o::OptimizationAlgorithmLevenberg( solver_ptr );
\f0\fs24 \cf0 \

\f2\fs22 \cf2     g2o::SparseOptimizer optimizer;     // 
\f1 \'cd\'bc\'c4\'a3\'d0\'cd
\f0\fs24 \cf0 \

\f2\fs22 \cf2     optimizer.setAlgorithm( solver );   // 
\f1 \'c9\'e8\'d6\'c3\'c7\'f3\'bd\'e2\'c6\'f7
\f0\fs24 \cf0 \

\f2\fs22 \cf2     
\f0\fs24 \cf0 \

\f2\fs22 \cf2     int vertexCnt = 0, edgeCnt = 0; // 
\f1 \'b6\'a5\'b5\'e3\'ba\'cd\'b1\'df\'b5\'c4\'ca\'fd\'c1\'bf
\f0\fs24 \cf0 \

\f2\fs22 \cf2     while ( !fin.eof() )
\f0\fs24 \cf0 \

\f2\fs22 \cf2     \{
\f0\fs24 \cf0 \

\f2\fs22 \cf2         string name;
\f0\fs24 \cf0 \

\f2\fs22 \cf2         fin>>name;
\f0\fs24 \cf0 \

\f2\fs22 \cf2         if ( name == "VERTEX_SE3:QUAT" )
\f0\fs24 \cf0 \

\f2\fs22 \cf2         \{
\f0\fs24 \cf0 \

\f2\fs22 \cf2             // SE3 
\f1 \'b6\'a5\'b5\'e3
\f0\fs24 \cf0 \

\f2\fs22 \cf2             g2o::VertexSE3* v = new g2o::VertexSE3();
\f0\fs24 \cf0 \

\f2\fs22 \cf2             int index = 0;
\f0\fs24 \cf0 \

\f2\fs22 \cf2             fin>>index;
\f0\fs24 \cf0 \

\f2\fs22 \cf2             v->setId( index );
\f0\fs24 \cf0 \

\f2\fs22 \cf2             v->read(fin);
\f0\fs24 \cf0 \

\f2\fs22 \cf2             optimizer.addVertex(v);
\f0\fs24 \cf0 \

\f2\fs22 \cf2             vertexCnt++;
\f0\fs24 \cf0 \

\f2\fs22 \cf2             if ( index==0 )
\f0\fs24 \cf0 \

\f2\fs22 \cf2                 v->setFixed(true);
\f0\fs24 \cf0 \

\f2\fs22 \cf2         \}
\f0\fs24 \cf0 \

\f2\fs22 \cf2         else if ( name=="EDGE_SE3:QUAT" )
\f0\fs24 \cf0 \

\f2\fs22 \cf2         \{
\f0\fs24 \cf0 \

\f2\fs22 \cf2             // SE3-SE3 
\f1 \'b1\'df
\f0\fs24 \cf0 \

\f2\fs22 \cf2             g2o::EdgeSE3* e = new g2o::EdgeSE3();
\f0\fs24 \cf0 \

\f2\fs22 \cf2             int idx1, idx2;     // 
\f1 \'b9\'d8\'c1\'aa\'b5\'c4\'c1\'bd\'b8\'f6\'b6\'a5\'b5\'e3
\f0\fs24 \cf0 \

\f2\fs22 \cf2             fin>>idx1>>idx2;
\f0\fs24 \cf0 \

\f2\fs22 \cf2             e->setId( edgeCnt++ );
\f0\fs24 \cf0 \

\f2\fs22 \cf2             e->setVertex( 0, optimizer.vertices()[idx1] );
\f0\fs24 \cf0 \

\f2\fs22 \cf2             e->setVertex( 1, optimizer.vertices()[idx2] );
\f0\fs24 \cf0 \

\f2\fs22 \cf2             e->read(fin);
\f0\fs24 \cf0 \

\f2\fs22 \cf2             optimizer.addEdge(e);
\f0\fs24 \cf0 \

\f2\fs22 \cf2         \}
\f0\fs24 \cf0 \

\f2\fs22 \cf2         if ( !fin.good() ) break;
\f0\fs24 \cf0 \

\f2\fs22 \cf2     \}
\f0\fs24 \cf0 \

\f2\fs22 \cf2     
\f0\fs24 \cf0 \

\f2\fs22 \cf2     cout<<"read total "<<vertexCnt<<" vertices, "<<edgeCnt<<" edges."<<endl;
\f0\fs24 \cf0 \

\f2\fs22 \cf2     
\f0\fs24 \cf0 \

\f2\fs22 \cf2     cout<<"prepare optimizing ..."<<endl;
\f0\fs24 \cf0 \

\f2\fs22 \cf2     optimizer.setVerbose(true);
\f0\fs24 \cf0 \

\f2\fs22 \cf2     optimizer.initializeOptimization();
\f0\fs24 \cf0 \

\f2\fs22 \cf2     cout<<"calling optimizing ..."<<endl;
\f0\fs24 \cf0 \

\f2\fs22 \cf2     optimizer.optimize(30);
\f0\fs24 \cf0 \

\f2\fs22 \cf2     
\f0\fs24 \cf0 \

\f2\fs22 \cf2     cout<<"saving optimization results ..."<<endl;
\f0\fs24 \cf0 \

\f2\fs22 \cf2     optimizer.save("result.g2o");
\f0\fs24 \cf0 \

\f2\fs22 \cf2     
\f0\fs24 \cf0 \

\f2\fs22 \cf2     return 0;
\f0\fs24 \cf0 \

\f2\fs22 \cf2 \}
\f0\fs24 \cf0 \
\

\f2\fs22 \cf2 */
\f0\fs24 \cf0 \

\f2\fs22 \cf2 /////////////////////////////////////////
\f0\fs24 \cf0 \

\f2\fs22 \cf2 /*
\f0\fs24 \cf0 \

\f2\fs22 \cf2 #include <opencv2/highgui/highgui.hpp>
\f0\fs24 \cf0 \

\f2\fs22 \cf2 #include <opencv2/imgproc/imgproc.hpp>
\f0\fs24 \cf0 \

\f2\fs22 \cf2 #include <opencv2/core/core.hpp>
\f0\fs24 \cf0 \

\f2\fs22 \cf2 #define threshold_diff 20 //
\f1 \'c9\'e8\'d6\'c3\'bc\'f2\'b5\'a5\'d6\'a1\'b2\'ee\'b7\'a8\'e3\'d0\'d6\'b5
\f0\fs24 \cf0 \

\f2\fs22 \cf2 using namespace cv;
\f0\fs24 \cf0 \

\f2\fs22 \cf2 using namespace std;
\f0\fs24 \cf0 \

\f2\fs22 \cf2 int main()
\f0\fs24 \cf0 \

\f2\fs22 \cf2 \{
\f0\fs24 \cf0 \

\f2\fs22 \cf2     Mat img_src1,img_src2,gray1,gray2,gray_diff;
\f0\fs24 \cf0 \

\f2\fs22 \cf2     bool pause=false;
\f0\fs24 \cf0 \

\f2\fs22 \cf2     VideoCapture vido_file("");//
\f1 \'d4\'da\'d5\'e2\'c0\'ef\'b8\'c4\'cf\'e0\'d3\'a6\'b5\'c4\'ce\'c4\'bc\'fe\'c3\'fb
\f0\fs24 \cf0 \

\f2\fs22 \cf2     namedWindow("foreground",0);
\f0\fs24 \cf0 \

\f2\fs22 \cf2     for (;;)
\f0\fs24 \cf0 \

\f2\fs22 \cf2     \{
\f0\fs24 \cf0 \

\f2\fs22 \cf2         if(!pause)
\f0\fs24 \cf0 \

\f2\fs22 \cf2         \{
\f0\fs24 \cf0 \

\f2\fs22 \cf2             vido_file >>img_src1;        //
\f1 \'d2\'f2\'ce\'aa\'ca\'d3\'c6\'b5\'ce\'c4\'bc\'fe\'d6\'a1\'ca\'fd\'d2\'d1\'be\'ad\'b9\'cc\'b6\'a8\'c1\'cb\'a3\'ac\'cb\'f9\'d2\'d4\'c3\'bf\'b4\'ce\'b5\'bd\'d5\'e2\'be\'e4\'d3\'ef\'be\'e4\'b6\'bc\'ca\'c7\'b6\'c1\'c8\'a1\'cf\'e0\'c1\'da\'b5\'c4\'d6\'a1\'ca\'fd\'a3\'ac\'c3\'bb\'b5\'bd\'ca\'b1\'bc\'e4\'ca\'d3\'c6\'b5\'b2\'a2\'b2\'bb\'cf\'f2\'c7\'b0\'d7\'df
\f0\fs24 \cf0 \

\f2\fs22 \cf2             cvtColor(img_src1,gray1,CV_BGR2GRAY);
\f0\fs24 \cf0 \

\f2\fs22 \cf2             imshow("video_src",img_src1);//
\f1 \'bf\'c9\'d2\'d4\'ca\'c2\'cf\'c8\'b2\'bb\'d3\'c3\'d0\'c2\'bd\'a8\'d2\'bb\'b8\'f6\'b4\'b0\'bf\'da
\f0\fs24 \cf0 \

\f2\fs22 \cf2             waitKey(5);
\f0\fs24 \cf0 \

\f2\fs22 \cf2             
\f0\fs24 \cf0 \

\f2\fs22 \cf2             vido_file >>img_src2;
\f0\fs24 \cf0 \

\f2\fs22 \cf2             cvtColor(img_src2,gray2,CV_BGR2GRAY);
\f0\fs24 \cf0 \

\f2\fs22 \cf2             imshow("video_src",img_src2);//
\f1 \'bf\'c9\'d2\'d4\'ca\'c2\'cf\'c8\'b2\'bb\'d3\'c3\'d0\'c2\'bd\'a8\'d2\'bb\'b8\'f6\'b4\'b0\'bf\'da
\f0\fs24 \cf0 \

\f2\fs22 \cf2             waitKey(5);
\f0\fs24 \cf0 \

\f2\fs22 \cf2             subtract(gray1,gray2,gray_diff);
\f0\fs24 \cf0 \

\f2\fs22 \cf2             for(int i=0;i<gray_diff.rows;i++)
\f0\fs24 \cf0 \

\f2\fs22 \cf2                 for(int j=0;j<gray_diff.cols;j++)
\f0\fs24 \cf0 \

\f2\fs22 \cf2                     if(abs(gray_diff.at<unsigned char>(i,j))>=threshold_diff)//
\f1 \'d5\'e2\'c0\'ef\'c4\'a3\'b0\'e5\'b2\'ce\'ca\'fd\'d2\'bb\'b6\'a8\'d2\'aa\'d3\'c3
\f2 unsigned char
\f1 \'a3\'ac\'b7\'f1\'d4\'f2\'be\'cd\'d2\'bb\'d6\'b1\'b1\'a8\'b4\'ed
\f2 9
\f0\fs24 \cf0 \

\f2\fs22 \cf2                         gray_diff.at<unsigned char>(i,j)=255;
\f0\fs24 \cf0 \

\f2\fs22 \cf2                     else
\f0\fs24 \cf0 \

\f2\fs22 \cf2                         gray_diff.at<unsigned char>(i,j)=0;
\f0\fs24 \cf0 \

\f2\fs22 \cf2             imshow("foreground",gray_diff);
\f0\fs24 \cf0 \

\f2\fs22 \cf2         \}
\f0\fs24 \cf0 \

\f2\fs22 \cf2         char c=(char)waitKey(10);
\f0\fs24 \cf0 \

\f2\fs22 \cf2         if (c==27)
\f0\fs24 \cf0 \

\f2\fs22 \cf2         \{
\f0\fs24 \cf0 \

\f2\fs22 \cf2             break;
\f0\fs24 \cf0 \

\f2\fs22 \cf2         \}
\f0\fs24 \cf0 \

\f2\fs22 \cf2         //  if(c==' ')
\f0\fs24 \cf0 \

\f2\fs22 \cf2         // pause=!pause;
\f0\fs24 \cf0 \

\f2\fs22 \cf2     \}
\f0\fs24 \cf0 \

\f2\fs22 \cf2     return 0;
\f0\fs24 \cf0 \

\f2\fs22 \cf2 \}
\f0\fs24 \cf0 \

\f2\fs22 \cf2  */
\f0\fs24 \cf0 \
\

\f2\fs22 \cf2 /* feature matching
\f0\fs24 \cf0 \

\f2\fs22 \cf2 #include <iostream>
\f0\fs24 \cf0 \

\f2\fs22 \cf2 #include <opencv2/core/core.hpp>
\f0\fs24 \cf0 \

\f2\fs22 \cf2 #include <opencv2/features2d/features2d.hpp>
\f0\fs24 \cf0 \

\f2\fs22 \cf2 #include <opencv2/highgui/highgui.hpp>
\f0\fs24 \cf0 \
\

\f2\fs22 \cf2 using namespace std;
\f0\fs24 \cf0 \

\f2\fs22 \cf2 using namespace cv;
\f0\fs24 \cf0 \
\

\f2\fs22 \cf2 int main ( int argc, char** argv )
\f0\fs24 \cf0 \

\f2\fs22 \cf2 \{
\f0\fs24 \cf0 \

\f2\fs22 \cf2     if ( argc != 3 )
\f0\fs24 \cf0 \

\f2\fs22 \cf2     \{
\f0\fs24 \cf0 \

\f2\fs22 \cf2         cout<<"usage: feature_extraction img1 img2"<<endl;
\f0\fs24 \cf0 \

\f2\fs22 \cf2         return 1;
\f0\fs24 \cf0 \

\f2\fs22 \cf2     \}
\f0\fs24 \cf0 \

\f2\fs22 \cf2     //-- 
\f1 \'b6\'c1\'c8\'a1\'cd\'bc\'cf\'f1
\f0\fs24 \cf0 \

\f2\fs22 \cf2     Mat img_1 = imread ( argv[1], CV_LOAD_IMAGE_COLOR );
\f0\fs24 \cf0 \

\f2\fs22 \cf2     Mat img_2 = imread ( argv[2], CV_LOAD_IMAGE_COLOR );
\f0\fs24 \cf0 \

\f2\fs22 \cf2     
\f0\fs24 \cf0 \

\f2\fs22 \cf2     //-- 
\f1 \'b3\'f5\'ca\'bc\'bb\'af
\f0\fs24 \cf0 \

\f2\fs22 \cf2     std::vector<KeyPoint> keypoints_1, keypoints_2;
\f0\fs24 \cf0 \

\f2\fs22 \cf2     Mat descriptors_1, descriptors_2;
\f0\fs24 \cf0 \

\f2\fs22 \cf2     Ptr<FeatureDetector> detector = ORB::create();
\f0\fs24 \cf0 \

\f2\fs22 \cf2     Ptr<DescriptorExtractor> descriptor = ORB::create();
\f0\fs24 \cf0 \

\f2\fs22 \cf2     // Ptr<FeatureDetector> detector = FeatureDetector::create(detector_name);
\f0\fs24 \cf0 \

\f2\fs22 \cf2     // Ptr<DescriptorExtractor> descriptor = DescriptorExtractor::create(descriptor_name);
\f0\fs24 \cf0 \

\f2\fs22 \cf2     Ptr<DescriptorMatcher> matcher  = DescriptorMatcher::create ( "BruteForce-Hamming" );
\f0\fs24 \cf0 \

\f2\fs22 \cf2     
\f0\fs24 \cf0 \

\f2\fs22 \cf2     //-- 
\f1 \'b5\'da\'d2\'bb\'b2\'bd
\f2 :
\f1 \'bc\'ec\'b2\'e2
\f2  Oriented FAST 
\f1 \'bd\'c7\'b5\'e3\'ce\'bb\'d6\'c3
\f0\fs24 \cf0 \

\f2\fs22 \cf2     detector->detect ( img_1,keypoints_1 );
\f0\fs24 \cf0 \

\f2\fs22 \cf2     detector->detect ( img_2,keypoints_2 );
\f0\fs24 \cf0 \

\f2\fs22 \cf2     
\f0\fs24 \cf0 \

\f2\fs22 \cf2     //-- 
\f1 \'b5\'da\'b6\'fe\'b2\'bd
\f2 :
\f1 \'b8\'f9\'be\'dd\'bd\'c7\'b5\'e3\'ce\'bb\'d6\'c3\'bc\'c6\'cb\'e3
\f2  BRIEF 
\f1 \'c3\'e8\'ca\'f6\'d7\'d3
\f0\fs24 \cf0 \

\f2\fs22 \cf2     descriptor->compute ( img_1, keypoints_1, descriptors_1 );
\f0\fs24 \cf0 \

\f2\fs22 \cf2     descriptor->compute ( img_2, keypoints_2, descriptors_2 );
\f0\fs24 \cf0 \

\f2\fs22 \cf2     
\f0\fs24 \cf0 \

\f2\fs22 \cf2     Mat outimg1;
\f0\fs24 \cf0 \

\f2\fs22 \cf2     drawKeypoints( img_1, keypoints_1, outimg1, Scalar::all(-1), DrawMatchesFlags::DEFAULT );
\f0\fs24 \cf0 \

\f2\fs22 \cf2     imshow("ORB
\f1 \'cc\'d8\'d5\'f7\'b5\'e3
\f2 ",outimg1);
\f0\fs24 \cf0 \

\f2\fs22 \cf2     
\f0\fs24 \cf0 \

\f2\fs22 \cf2     //-- 
\f1 \'b5\'da\'c8\'fd\'b2\'bd
\f2 :
\f1 \'b6\'d4\'c1\'bd\'b7\'f9\'cd\'bc\'cf\'f1\'d6\'d0\'b5\'c4
\f2 BRIEF
\f1 \'c3\'e8\'ca\'f6\'d7\'d3\'bd\'f8\'d0\'d0\'c6\'a5\'c5\'e4\'a3\'ac\'ca\'b9\'d3\'c3
\f2  Hamming 
\f1 \'be\'e0\'c0\'eb
\f0\fs24 \cf0 \

\f2\fs22 \cf2     vector<DMatch> matches;
\f0\fs24 \cf0 \

\f2\fs22 \cf2     //BFMatcher matcher ( NORM_HAMMING );
\f0\fs24 \cf0 \

\f2\fs22 \cf2     matcher->match ( descriptors_1, descriptors_2, matches );
\f0\fs24 \cf0 \

\f2\fs22 \cf2     
\f0\fs24 \cf0 \

\f2\fs22 \cf2     //-- 
\f1 \'b5\'da\'cb\'c4\'b2\'bd
\f2 :
\f1 \'c6\'a5\'c5\'e4\'b5\'e3\'b6\'d4\'c9\'b8\'d1\'a1
\f0\fs24 \cf0 \

\f2\fs22 \cf2     double min_dist=10000, max_dist=0;
\f0\fs24 \cf0 \

\f2\fs22 \cf2     
\f0\fs24 \cf0 \

\f2\fs22 \cf2     //
\f1 \'d5\'d2\'b3\'f6\'cb\'f9\'d3\'d0\'c6\'a5\'c5\'e4\'d6\'ae\'bc\'e4\'b5\'c4\'d7\'ee\'d0\'a1\'be\'e0\'c0\'eb\'ba\'cd\'d7\'ee\'b4\'f3\'be\'e0\'c0\'eb
\f2 , 
\f1 \'bc\'b4\'ca\'c7\'d7\'ee\'cf\'e0\'cb\'c6\'b5\'c4\'ba\'cd\'d7\'ee\'b2\'bb\'cf\'e0\'cb\'c6\'b5\'c4\'c1\'bd\'d7\'e9\'b5\'e3\'d6\'ae\'bc\'e4\'b5\'c4\'be\'e0\'c0\'eb
\f0\fs24 \cf0 \

\f2\fs22 \cf2     for ( int i = 0; i < descriptors_1.rows; i++ )
\f0\fs24 \cf0 \

\f2\fs22 \cf2     \{
\f0\fs24 \cf0 \

\f2\fs22 \cf2         double dist = matches[i].distance;
\f0\fs24 \cf0 \

\f2\fs22 \cf2         if ( dist < min_dist ) min_dist = dist;
\f0\fs24 \cf0 \

\f2\fs22 \cf2         if ( dist > max_dist ) max_dist = dist;
\f0\fs24 \cf0 \

\f2\fs22 \cf2     \}
\f0\fs24 \cf0 \

\f2\fs22 \cf2     
\f0\fs24 \cf0 \

\f2\fs22 \cf2     // 
\f1 \'bd\'f6\'b9\'a9\'d3\'e9\'c0\'d6\'b5\'c4\'d0\'b4\'b7\'a8
\f0\fs24 \cf0 \

\f2\fs22 \cf2     min_dist = min_element( matches.begin(), matches.end(), [](const DMatch& m1, const DMatch& m2) \{return m1.distance<m2.distance;\} )->distance;
\f0\fs24 \cf0 \

\f2\fs22 \cf2     max_dist = max_element( matches.begin(), matches.end(), [](const DMatch& m1, const DMatch& m2) \{return m1.distance<m2.distance;\} )->distance;
\f0\fs24 \cf0 \

\f2\fs22 \cf2     
\f0\fs24 \cf0 \

\f2\fs22 \cf2     printf ( "-- Max dist : %f \\n", max_dist );
\f0\fs24 \cf0 \

\f2\fs22 \cf2     printf ( "-- Min dist : %f \\n", min_dist );
\f0\fs24 \cf0 \

\f2\fs22 \cf2     
\f0\fs24 \cf0 \

\f2\fs22 \cf2     //
\f1 \'b5\'b1\'c3\'e8\'ca\'f6\'d7\'d3\'d6\'ae\'bc\'e4\'b5\'c4\'be\'e0\'c0\'eb\'b4\'f3\'d3\'da\'c1\'bd\'b1\'b6\'b5\'c4\'d7\'ee\'d0\'a1\'be\'e0\'c0\'eb\'ca\'b1
\f2 ,
\f1 \'bc\'b4\'c8\'cf\'ce\'aa\'c6\'a5\'c5\'e4\'d3\'d0\'ce\'f3
\f2 .
\f1 \'b5\'ab\'d3\'d0\'ca\'b1\'ba\'f2\'d7\'ee\'d0\'a1\'be\'e0\'c0\'eb\'bb\'e1\'b7\'c7\'b3\'a3\'d0\'a1
\f2 ,
\f1 \'c9\'e8\'d6\'c3\'d2\'bb\'b8\'f6\'be\'ad\'d1\'e9\'d6\'b5
\f2 30
\f1 \'d7\'f7\'ce\'aa\'cf\'c2\'cf\'de
\f2 .
\f0\fs24 \cf0 \

\f2\fs22 \cf2     std::vector< DMatch > good_matches;
\f0\fs24 \cf0 \

\f2\fs22 \cf2     for ( int i = 0; i < descriptors_1.rows; i++ )
\f0\fs24 \cf0 \

\f2\fs22 \cf2     \{
\f0\fs24 \cf0 \

\f2\fs22 \cf2         if ( matches[i].distance <= max ( 2*min_dist, 30.0 ) )
\f0\fs24 \cf0 \

\f2\fs22 \cf2         \{
\f0\fs24 \cf0 \

\f2\fs22 \cf2             good_matches.push_back ( matches[i] );
\f0\fs24 \cf0 \

\f2\fs22 \cf2         \}
\f0\fs24 \cf0 \

\f2\fs22 \cf2     \}
\f0\fs24 \cf0 \

\f2\fs22 \cf2     
\f0\fs24 \cf0 \

\f2\fs22 \cf2     //-- 
\f1 \'b5\'da\'ce\'e5\'b2\'bd
\f2 :
\f1 \'bb\'e6\'d6\'c6\'c6\'a5\'c5\'e4\'bd\'e1\'b9\'fb
\f0\fs24 \cf0 \

\f2\fs22 \cf2     Mat img_match;
\f0\fs24 \cf0 \

\f2\fs22 \cf2     Mat img_goodmatch;
\f0\fs24 \cf0 \

\f2\fs22 \cf2     drawMatches ( img_1, keypoints_1, img_2, keypoints_2, matches, img_match );
\f0\fs24 \cf0 \

\f2\fs22 \cf2     drawMatches ( img_1, keypoints_1, img_2, keypoints_2, good_matches, img_goodmatch );
\f0\fs24 \cf0 \

\f2\fs22 \cf2     imshow ( "
\f1 \'cb\'f9\'d3\'d0\'c6\'a5\'c5\'e4\'b5\'e3\'b6\'d4
\f2 ", img_match );
\f0\fs24 \cf0 \

\f2\fs22 \cf2     imshow ( "
\f1 \'d3\'c5\'bb\'af\'ba\'f3\'c6\'a5\'c5\'e4\'b5\'e3\'b6\'d4
\f2 ", img_goodmatch );
\f0\fs24 \cf0 \

\f2\fs22 \cf2     waitKey(0);
\f0\fs24 \cf0 \

\f2\fs22 \cf2     
\f0\fs24 \cf0 \

\f2\fs22 \cf2     return 0;
\f0\fs24 \cf0 \

\f2\fs22 \cf2 \}
\f0\fs24 \cf0 \

\f2\fs22 \cf2 */
\f0\fs24 \cf0 \
}